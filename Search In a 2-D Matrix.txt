class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        // BRUTE: linearly traverse matrix & search for the element
        // TIME: O(N X M)  SPACE: O(1)

        // OPTIMISE: we know the rows are SORTED, we'll do a binary search on each rows
        // TIME: O(N X logM)      N as we go on all rows, logM as we perform binary search in each row

        // MORE OPTIMISE: in ex.1, we'll start from last element of 1st row, we know matrix is rowwise & columnwise sorted
        // for each element, compare our target, if matrix[i][j] > target, go LEFT
        // if matrix[i][j] < target, go DOWN
        // int rows = matrix.size();
        // int cols = matrix[0].size();
        // int i=0;
        // int j = cols-1;
        // bool answer = false;
        // while(i<rows && j>=0)
        // {
        //     if(matrix[i][j] == target)
        //     answer = true;
        //     if(matrix[i][j] > target)
        //     {
        //         j--;             // moving back a column
        //     }
        //     else 
        //     i++;                 // moving ahead a row
        // }
        // return answer;

        // MORE OPTIMAL SOLUTION: BINARY SEARCH without using any extra space
        // TIME : O(log (NXM) )   SPACE: O(1)
        int n = matrix.size();
        int m = matrix[0].size();
        int low = 0;
        int high = (n*m)-1;
        while(low <= high){
            int mid = ( low + (high-low) / 2);       // to avoid OVERFLOW
            if(matrix[mid/m][mid%m] == target){
                return true;
            }
            if(matrix[mid/m][mid%m] > target){
                high = mid-1;
            }
            else if(matrix[mid/m][mid%m] < target){
                low = mid+1;
            }
        }
        return false;
    }
};