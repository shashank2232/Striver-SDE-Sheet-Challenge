class Solution {
public:
    void sortColors(vector<int>& nums) {
    // sort(nums.begin(),nums.end());   TIME: O(NlogN) Space: O(1)
        
    // another approach : COUNTING SORT (linearly traverse & count total 0,total 1 & total 2)
    // run loops & insert them accordingly
    // TIME: O(2N)    SPACE: O(1)
    // int count0 = 0,count1 = 0, count2 = 0;
    // for(int i=0;i<nums.size();i++)
    // {
    //     if(nums[i] == 0)
    //     count0++;
    //     else if(nums[i] == 1)
    //     count1++;
    //     else if(nums[i] == 2)
    //     count2++;
    // }
    // int i=0;
    // while(count0 > 0)
    // {
    //     nums[i] = 0;
    //     i++;
    //     count0--;
    // }
    // while(count1 > 0)
    // {
    //     nums[i] = 1;
    //     i++;
    //     count1--;
    // }
    // while(count2 > 0)
    // {
    //     nums[i] = 2;
    //     i++;
    //     count2--;
    // }


    // OPTIMISED APPROACH: 3-pointer approach   TIME: O(N) SPACE: O(1)
    // low , mid & high   (all numbers to the left will b 0 & to the right will b 2, in middle will b 1 automatcally)
    // we'll b moving the mid pointer till (mid <= high)
    // (1) when mid is at 0, swap(nums[low],nums[mid])  & move both by 1, i.e. low++,mid++
    // (2) when mid is at 1,simply move mid ahead, mid++
    // (3) when mid is at 2, swap(nums[mid],nums[high]) & high backwards, high-- , here mid won't move
    int low=0;
    int mid=0;
    int high=nums.size()-1;
    // we'll use SWITCH()
    while(mid<=high)
    {
        switch(nums[mid]){
            // if number is 0
            case 0:
               swap(nums[low++],nums[mid++]);
               break;
            // if number is 1
            case 1:
               mid++;
               break;
            // if number is 2
            case 2:
               swap(nums[high--],nums[mid]);
               break;
        }
    }
   }
};