#include<bits/stdc++.h>
vector<vector<int>> fourSum(vector<int>& nums, int target) {
    // BRUTE APPROACH-> TIME: O(Npower4)  SPACE:2*O(no. of quads)
    // set<vector<int>>st;
    // int n = nums.size();
    // for(int i=0;i<n;i++){
    //     for(int j=i+1;j<n;j++){
    //         for(int k=j+1;k<n;k++){
    //             for(int l=k+1;l<n;l++){
    //                 if(nums[i] + nums[j] + nums[k] + nums[l] == target){
    //                     vector<int>temp = {nums[i],nums[j],nums[k],nums[l]};
    //                     sort(temp.begin(),temp.end());
    //                     st.insert(temp);
    //                 }
    //             }
    //         }
    //     }
    // }
    // vector<vector<int>>ans(st.begin(),st.end());
    // return ans;

    // BETTER APPROACH-> TIME:O(Ncube * logm) , m is number of elements in set
    // SPACE: O(N) for set + 2*O(no. of quads) , 1 for set and 1 for ans returning answer
    // int n = nums.size(); 
    // set<vector<int>>st;
    // for(int i=0;i<n;i++){
    //     for(int j=i+1;j<n;j++){
    //         // whenever j moves forward we need an empty hashset to store new quadruplets
    //         set<int>hashset;
    //         for(int k=j+1;k<n;k++){
    //             long long sum = nums[i] + nums[j] + nums[k];
    //             long long fourth = target - (sum);
    //             // if fourth is present in hashset, store the quad in st, if not put arr[k] in hashset and move on
    //             if(hashset.find(fourth) != hashset.end()){
    //                 vector<int>temp = {nums[i],nums[j],nums[k],fourth};
    //                 sort(temp.begin(),temp.end());
    //                 st.insert(temp);
    //             }
    //             hashset.insert(nums[k]);
    //         }
    //     }
    // }
    // vector<vector<int>>ans(st.begin(),st.end());
    // return ans;

    // MOST OPTIMAL -> TIME:O(Ncube) , Nsquare for i and j and N for k to l
    // SPACE: we're just using vector ans to return the answer, no use of extra space in our approach
    // similar to 3sum, there we kept i stable and moved j and k , here we're keeping i,j stable and moving k,l
    int n = nums.size();
    vector<vector<int>>ans;
    sort(nums.begin(),nums.end());
    for(int i=0;i<n;i++){
        if(i>0 && nums[i] == nums[i-1]) continue;
        for(int j=i+1;j<n;j++){
            if(j!=i+1 && nums[j] == nums[j-1]) continue;
            int k = j+1;
            int l = n-1;
            while(k < l){
                long long sum = nums[i];
                sum += nums[j];
                sum += nums[k];
                sum += nums[l];
                if(sum < target){
                    k++;
                }
                else if(sum > target){
                    l--;
                }
                // if sum==target
                else{
                    vector<int>temp = {nums[i],nums[j],nums[k],nums[l]};
                    ans.push_back(temp);
                    k++;
                    l--;
                    while(k<l && nums[k] == nums[k-1]){
                        k++;
                    }
                    while(k<l && nums[l] == nums[l+1]){
                        l--;
                    }
                }
            }
        }
    }
    return ans;
}