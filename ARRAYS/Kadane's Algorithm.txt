class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        // solution with time O(Ncube) take 3 for loops first two for subarrays and last loop for sum and in end take maxSum

        // solution with time O(Nsquare) eliminate third loop & take sum in 2 loops only

        // TIME: O(N) Space: O(1)  
        //KADANE'S ALGORITHM (carry a sub-array sum as long as it gives us a +ve sum , if sum becomes negative, change it to 0, the maxSum will b current element
        int sum = 0;
        int maxSum = INT_MIN;
        for(int i=0; i<nums.size(); i++){
            sum += nums[i];
            maxSum = max(maxSum,sum);
            // if sum goes -ve , make it 0
            if(sum < 0){
                sum = 0;
            }
        }
        return maxSum;
    }
};