#include <bits/stdc++.h> 
void merge(vector<int>&arr,int start,int mid,int end){
	vector<int>temp;
	int left = start;
	int right = mid+1;

	while(left <= mid && right <= end){
		if(arr[left] <= arr[right]){
			temp.push_back(arr[left]);
			left++;
		}
		else{
			temp.push_back(arr[right]);
			right++;
		}
	}

	while(left<=mid){
		temp.push_back(arr[left]);
		left++;
	}
	while(right<=end){
		temp.push_back(arr[right]);
		right++;
	}

	for(int i=start;i<=end;i++){
		arr[i] = temp[i-start];
	}
}
int countPairs(vector<int>&arr,int start,int mid,int end){
	int right = mid+1;
	int count = 0; 
	for(int i=start;i<=mid;i++){
		while(right<=end && arr[i] > 2*arr[right]){
			right++;
		}
		count += (right - (mid+1));
	}
	return count;
}
int mergeSort(vector<int>&arr,int start,int end)
{
	int count = 0;
	if(start >= end){
		return count;
	}
	int mid = (start+end)/2;
	count += mergeSort(arr,start,mid);
	count += mergeSort(arr,mid+1,end);
	count += countPairs(arr,start,mid,end);
	merge(arr,start,mid,end);
	return count;
}
int reversePairs(vector<int> &arr, int n){
	return mergeSort(arr,0,n-1);
}

// TIME: O(2NlogN)  SPACE: O(N) 
logN for dividing array , O(N) for merge operation, before merge we're doing another count pairs operation i.e. O(N)